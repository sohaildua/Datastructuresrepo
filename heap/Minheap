from turtle import right


def heapify(arr, n , i):
    smallest = i
    leftNode= 2*i + 1
    rightNode = 2*i + 2
    
    
    if n> leftNode and arr[smallest] > arr[leftNode]:
        smallest = leftNode
    if n>  rightNode and arr[smallest] > arr[rightNode]:
        smallest = rightNode
        
    if smallest !=i:
        arr[i] = arr[smallest]
        arr[smallest] = arr[i]
        heapify(arr,n, smallest)
        
        

def buildHeap(arr, n):
      
    # Index of last non-leaf node
    startIdx = n // 2 - 1
  
    # Perform reverse level order traversal
    # from last non-leaf node and heapify
    # each node
    for i in range(startIdx, -1, -1):
        heapify(arr, n, i)
        
def heapSort(arr,n):
    startIdx = n // 2 - 1
  
    # Perform reverse level order traversal
    # from last non-leaf node and heapify
    # each node
    for i in range(startIdx, -1, -1):
        heapify(arr, n, i)    
        
    for x in range(n-1 , 0 ,-1) :
          arr[x],arr[0]= arr[0],arr[x]
          heapify(arr, x, 0)
          
       
def printHeap(arr, n):
    print("Array representation of Heap is:")
  
    for i in range(n):
        print(arr[i], end=" ")
    print()
  
  
  


if __name__ == '__main__':
  arr = [1, 3, 5, 4, 6, 13,
           10, 9, 8, 15, 17]
  
  n = len(arr)
  
  buildHeap(arr, n)
  
  printHeap(arr, n) 
  heapSort(arr, n)
  
  printHeap(arr, n)